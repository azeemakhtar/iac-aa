parameters:
  - name: serviceConnection
    type: string
    values:
      - $(serviceConnection_dev)
      - $(serviceConnection_test)
      - $(serviceConnection_preprod)
      - $(serviceConnection_prod)
  - name: kubernetesConnection
    type: string
    values:
      - $(kubernetesConnection_dev)
      - $(kubernetesConnection_test)
      - $(kubernetesConnection_preprod)
      - $(kubernetesConnection_prod)
  - name: environment
    type: string
    values:
      - dev
      - test
      - preprod
      - prod
  - name: dependsOn
    type: object
  - name: resourceGroupName
    type: string
  - name: storageAccountName
    type: string
  - name: secretName
    type: string
  - name: namespace
    type: string

jobs:
  - deployment: CreatePvSecret
    dependsOn: ${{ parameters.dependsOn }}
    displayName: 'Create storage account secrets for persistent volumes'
    timeoutInMinutes: '0'
    pool:
      name: $(agentPool)
    environment: sub-${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: AzureCLI@2
              displayName: "az storage account keys list"
              inputs:
                azureSubscription: ${{ parameters.serviceConnection }}
                scriptType: "ps"
                scriptLocation: "inlineScript"
                workingDirectory: $(templatelocation)
                inlineScript: |
                  $storageAccountKey = az storage account keys list `
                    --resource-group ${{ parameters.resourceGroupName }} `
                    --account-name ${{ parameters.storageAccountName }} `
                    --query '[0].value' `
                    --output tsv
                  Write-Host "##vso[task.setvariable variable=storageAccountKey]$storageAccountKey"
            - task: Kubernetes@1
              displayName: "Create Kubernetes secret"
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: ${{ parameters.kubernetesConnection }}
                namespace: ${{ parameters.namespace }}
                secretType: generic
                secretArguments: |
                  --from-literal=azurestorageaccountname=${{ parameters.storageAccountName }} --from-literal=azurestorageaccountkey=$(storageAccountKey)
                secretName: ${{ parameters.secretName }}
